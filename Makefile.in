# Copyright (C) 2005-2006 Axel Liljencrantz
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA	02111-1307, USA.
#

# @configure_input@

CC := @CC@
INSTALL:=@INSTALL@


prefix = @prefix@
exec_prefix = @exec_prefix@
datadir = @datadir@
bindir = @bindir@
mandir = @mandir@
sysconfdir = @sysconfdir@
docdir = @docdir@
localedir = @localedir@
prefix = @prefix@
optbindirs = @optbindirs@ 

MACROS = -DLOCALEDIR=\"$(localedir)\" -DPREFIX=L\"$(prefix)\" -DDATADIR=L\"$(datadir)\" -DSYSCONFDIR=L\"$(sysconfdir)\" 
CFLAGS = @CFLAGS@ $(MACROS) 
CPPFLAGS = @CPPFLAGS@ 
LDFLAGS = @LIBS@ @LDFLAGS@ 
LDFLAGS_FISH = ${LDFLAGS} @LIBS_FISH@ @LDFLAGS_FISH@
LDFLAGS_FISH_INDENT = ${LDFLAGS} @LIBS_FISH_INDENT@
LDFLAGS_FISH_PAGER = ${LDFLAGS} @LIBS_FISH_PAGER@
LDFLAGS_FISHD = ${LDFLAGS} @LIBS_FISHD@
LDFLAGS_MIMEDB = ${LDFLAGS} @LIBS_MIMEDB@
LDFLAGS_SET_COLOR = ${LDFLAGS} @LIBS_SET_COLOR@

HAVE_GETTEXT=@HAVE_GETTEXT@


COMMON_FILES := util.c halloc.c halloc_util.c fallback.c

# All objects that the system needs to build fish, except fish.o
FISH_OBJS := function.o builtin.o complete.o env.o exec.o expand.o		\
	highlight.o history.o kill.o parser.o proc.o reader.o sanity.o		\
	tokenizer.o wildcard.o wgetopt.o wutil.o input.o output.o intern.o	\
	env_universal.o env_universal_common.o input_common.o event.o		\
	signal.o io.o parse_util.o common.o screen.o path.o					\
	parser_keywords.o

FISH_INDENT_OBJS := fish_indent.o print_help.o common.o parser_keywords.o wutil.o tokenizer.o
BUILTIN_FILES := builtin_set.c builtin_commandline.c builtin_ulimit.c builtin_complete.c builtin_jobs.c
FISH_PAGER_OBJS := fish_pager.o output.o wutil.o input_common.o env_universal.o env_universal_common.o common.o print_help.o
FISH_TESTS_OBJS := $(FISH_OBJS) fish_tests.o
FISHD_OBJS := fishd.o env_universal_common.o wutil.o print_help.o common.o
MIME_OBJS := mimedb.o print_help.o xdgmimealias.o xdgmime.o xdgmimeglob.o xdgmimeint.o xdgmimemagic.o xdgmimeparent.o wutil.o common.o

TEST_IN := $(wildcard tests/test*.in)

MAIN_DIR_FILES_UNSORTED := Makefile.in configure configure.ac config.h.in install-sh			\
		set_color.c key_reader.c $(MIME_OBJS:.o=.h)					\
		$(MIME_OBJS:.o=.c) $(FISH_OBJS:.o=.h) $(BUILTIN_FILES)				\
		$(COMMON_FILES) $(COMMON_FILES:.c=.h) $(FISH_OBJS:.o=.c)			\
		fish.spec.in INSTALL README \
		ChangeLog config.sub config.guess fish_tests.c fish.c fish_pager.c	\
		fishd.c seq.in make_vcs_completions.fish $(FISH_INDENT_OBJS:.o=.c)

MAIN_DIR_FILES := $(sort $(MAIN_DIR_FILES_UNSORTED))

ETC_DIR_FILES :=etc/config.fish.in	
SHARE_DIR_FILES :=share/config.fish.in

TESTS_DIR_FILES := $(TEST_IN) $(TEST_IN:.in=.out) $(TEST_IN:.in=.err) $(TEST_IN:.in=.status) tests/test.fish tests/gen_output.fish

COMPLETIONS_DIR_FILES := $(wildcard share/completions/*.fish)
FUNCTIONS_DIR_FILES := $(wildcard share/functions/*.fish)

SIMPLE_PROGRAMS := fish set_color mimedb fish_pager fishd fish_indent
PROGRAMS := $(SIMPLE_PROGRAMS) @SEQ_FALLBACK@ 

all: $(PROGRAMS) etc/config.fish share/config.fish
.PHONY: all

debug: $(MAKE) fish CFLAGS="@CFLAGS@ $(MACROS) -O0 -Wno-unused -Werror -g"
.PHONY: debug

configure: configure.ac
	./config.status --recheck

Makefile: Makefile.in configure
	./config.status

test: $(PROGRAMS) fish_tests
	./fish_tests; cd tests; ../fish <test.fish;
.PHONY: test


builtin.o: $(BUILTIN_FILES)

common.o: $(COMMON_FILES)

#
# The build rules for installing/uninstalling fish
#

#
# Check for an incompatible installed fish version, and fail with an
# error if found
#

%: %.in
	sed <$@.in >$@ \
		-e "s,@sysconfdir\@,$(sysconfdir),g" \
		-e "s,@datadir\@,$(datadir),g" \
		-e "s,@docdir\@,$(docdir),g" \
		-e "s|@configure_input\@|$@, generated from $@.in by the Makefile. DO NOT MANUALLY EDIT THIS FILE!|g" \
		-e "s,@prefix\@,$(prefix),g" \
		-e "s,@optbindirs\@,$(optbindirs),g" \a
		-e "s,@\@,$()," 

check-uninstall:
	if test -f $(DESTDIR)$(sysconfdir)/fish.d/fish_function.fish -o -f $(DESTDIR)$(sysconfdir)/fish.d/fish_complete.fish; then \
		echo;\
		echo ERROR;\
		echo;\
		echo An older fish installation using an incompatible filesystem hierarchy was detected;\
		echo You must uninstall this fish version before proceeding;\
		echo type \'$(MAKE) uninstall-legacy\' to uninstall these files,;\
		echo or type \'$(MAKE) force-install\' to force installation.;\
		echo The latter may result in a broken installation.;\
		echo;\
		false;\
	fi;
	if test -f $(DESTDIR)$(sysconfdir)/fish; then \
		echo;\
		echo ERROR;\
		echo;\
		echo An older fish installation using an incompatible filesystem hierarchy was detected;\
		echo You must remove the file $(DESTDIR)$(sysconfdir)/fish before proceeding;\
		echo type \'$(MAKE) uninstall-legacy\' to uninstall this file,;\
		echo or remove it manually using \'rm $(DESTDIR)$(sysconfdir)/fish\'.;\
		echo;\
		false;\
	fi;
.PHONY: check-uninstall


#
# This check makes sure that the install-sh script is executable. The
# darcs repo doesn't preserve the executable bit, so this needs to be
# run after checkout.
#

install-sh:
	if test -x $@; then true; else chmod 755 $@; fi
.PHONY: install-sh


# Try to install after checking for incompatible installed versions.
install: all install-sh check-uninstall install-force
.PHONY: install


# Force installation, even in presense of incompatible previous version. This may fail.
install-force: all
	for i in $(PROGRAMS); do\
		$(INSTALL) -m 755 $$i $(DESTDIR)$(bindir) ; \
	done;
	$(INSTALL) -m 755 -d $(DESTDIR)$(sysconfdir)/fish
	$(INSTALL) -m 755 -d $(DESTDIR)$(datadir)/fish
	$(INSTALL) -m 755 -d $(DESTDIR)$(datadir)/fish/completions
	$(INSTALL) -m 755 -d $(DESTDIR)$(datadir)/fish/functions
	$(INSTALL) -m 755 -d $(DESTDIR)$(datadir)/fish/man
	$(INSTALL) -m 644 etc/config.fish									$(DESTDIR)$(sysconfdir)/fish/
	$(INSTALL) -m 644 share/config.fish								$(DESTDIR)$(datadir)/fish/
	for i in $(COMPLETIONS_DIR_FILES); do \
		$(INSTALL) -m 644 $$i $(DESTDIR)$(datadir)/fish/completions/; \
	done;
	for i in $(FUNCTIONS_DIR_FILES); do \
		$(INSTALL) -m 644 $$i $(DESTDIR)$(datadir)/fish/functions/; \
	done;
	@echo fish is now installed on your system. 
	@echo To run fish, type \'fish\' in your terminal.
	@echo
	@echo To use fish as your login shell:
	@echo \* add the line \'$(DESTDIR)$(bindir)/fish\' to the file \'/etc/shells\'.
	@echo \* use the command \'chsh -s $(DESTDIR)$(bindir)/fish\'.
	@echo
	@echo Have fun!
.PHONY: install-force


# Uninstall this fish version
uninstall:
	-for i in $(PROGRAMS); do \
		rm -f $(DESTDIR)$(bindir)/$$i; \
	done;
	-rm -f $(DESTDIR)$(sysconfdir)/fish/config.fish
	-rmdir $(DESTDIR)$(sysconfdir)/fish
	-if test -d $(DESTDIR)$(datadir)/fish; then \
		rm -r $(DESTDIR)$(datadir)/fish; \
	fi
	-if test -d $(DESTDIR)$(docdir); then \
		rm -r $(DESTDIR)$(docdir);\
	fi
	-for i in $(MANUALS); do \
		rm -f $(DESTDIR)$(mandir)/man1/`basename $$i`*; \
	done;
.PHONY: uninstall


#
# Uninstall an older fish release. This is not the default uninstall
# since there is a slight chance that it removes a file put in place by
# the sysadmin. But if 'make install' detects a file confligt, it
# suggests using this target.
#

uninstall-legacy: uninstall
	-rm -f $(DESTDIR)$(sysconfdir)/fish.d/fish_interactive.fish
	-rm -f $(DESTDIR)$(sysconfdir)/fish.d/fish_complete.fish
	-rm -f $(DESTDIR)$(sysconfdir)/fish.d/fish_function.fish
	-rm -f $(DESTDIR)$(sysconfdir)/fish/fish_inputrc
	-if test -d $(DESTDIR)$(sysconfdir)/fish.d/completions; then \
		for i in $(COMPLETIONS_DIR_FILES); do \
			basename=`basename $$i`; \
			if test -f $(DESTDIR)$(sysconfdir)/fish.d/completions/$$basename; then \
				rm $(DESTDIR)$(sysconfdir)/fish.d/completions/$$basename; \
			fi; \
		done; \
	fi;
	-rmdir $(DESTDIR)$(sysconfdir)/fish.d/completions
	-rmdir $(DESTDIR)$(sysconfdir)/fish.d
	-rm $(DESTDIR)$(sysconfdir)/fish
	@echo The previous fish installation has been removed. 
.PHONY: uninstall-legacy


# Build the fish program.
fish: $(FISH_OBJS) fish.o 
	$(CC) $(FISH_OBJS) fish.o $(LDFLAGS_FISH) -o $@


# Build the fish_pager program.
fish_pager: $(FISH_PAGER_OBJS)
	$(CC) $(FISH_PAGER_OBJS) $(LDFLAGS_FISH_PAGER) -o $@


# Build the fishd program.
fishd: $(FISHD_OBJS) 
	$(CC) $(FISHD_OBJS) $(LDFLAGS_FISHD) -o $@


# Build the fish_tests program.
fish_tests: $(FISH_TESTS_OBJS)
	$(CC) $(FISH_TESTS_OBJS) $(LDFLAGS_FISH) -o $@


# Build the mimedb program. mimedb does not need any libraries, so we don't use LDFLAGS here.
mimedb: $(MIME_OBJS)
	$(CC) $(MIME_OBJS) $(LDFLAGS_MIMEDB) -o $@


# Build the set_color program
set_color: set_color.o print_help.o common.o
	$(CC) set_color.o print_help.o common.o wutil.o $(LDFLAGS_SET_COLOR) -o $@


# Test program for the tokenizer library
tokenizer_test: tokenizer.c tokenizer.h wutil.o common.o
	$(CC) $(CFLAGS) tokenizer.c wutil.o common.o -D TOKENIZER_TEST $(LDFLAGS) -o $@


# Build the fish_indent program.
fish_indent: $(FISH_INDENT_OBJS)
	$(CC) $(FISH_INDENT_OBJS) $(LDFLAGS_FISH_INDENT) -o $@


# Neat little program to show output from terminal
key_reader: key_reader.o input_common.o common.o env_universal.o env_universal_common.o wutil.o
	$(CC) key_reader.o input_common.o common.o env_universal.o env_universal_common.o wutil.o $(LDFLAGS_FISH) -o $@


#
# Update dependencies
#
depend:
	makedepend -fMakefile.in -Y *.c 
	./config.status
.PHONY: depend

#
# Copy all the source files into a new directory and use tar to create
# an archive from it. Simplest way I could think of to make an archive
# witout backups, autogenerated files, etc.
#
# Uses install instead of mkdir so build won't fail if the directory 
# exists
#

fish-@PACKAGE_VERSION@.tar: $(DOC_SRC_DIR_FILES) $(MAIN_DIR_FILES) $(ETC_DIR_FILES) $(TEST_DIR_FILES) $(SHARE_DIR_FILES) $(FUNCTIONS_DIR_FILES) $(COMPLETIONS_DIR_FILES) ChangeLog user_doc share/man
	rm -rf fish-@PACKAGE_VERSION@
	$(INSTALL) -d fish-@PACKAGE_VERSION@
	$(INSTALL) -d fish-@PACKAGE_VERSION@/doc_src
	$(INSTALL) -d fish-@PACKAGE_VERSION@/user_doc
	$(INSTALL) -d fish-@PACKAGE_VERSION@/etc
	$(INSTALL) -d fish-@PACKAGE_VERSION@/share
	$(INSTALL) -d fish-@PACKAGE_VERSION@/share/completions
	$(INSTALL) -d fish-@PACKAGE_VERSION@/share/functions
	$(INSTALL) -d fish-@PACKAGE_VERSION@/tests
	cp -f $(DOC_SRC_DIR_FILES) fish-@PACKAGE_VERSION@/doc_src
	cp -f $(MAIN_DIR_FILES) fish-@PACKAGE_VERSION@/
	cp -f $(ETC_DIR_FILES) fish-@PACKAGE_VERSION@/etc/
	cp -f $(SHARE_DIR_FILES) fish-@PACKAGE_VERSION@/share/
	cp -f $(COMPLETIONS_DIR_FILES) fish-@PACKAGE_VERSION@/share/completions/
	cp -f $(FUNCTIONS_DIR_FILES) fish-@PACKAGE_VERSION@/share/functions/
	cp -f $(TESTS_DIR_FILES) fish-@PACKAGE_VERSION@/tests/
	cp -rf user_doc fish-@PACKAGE_VERSION@/
	tar -c fish-@PACKAGE_VERSION@ >fish-@PACKAGE_VERSION@.tar
	rm -rf fish-@PACKAGE_VERSION@


# Just an alias for fish-@PACKAGE_VERSION@.tar
tar: fish-@PACKAGE_VERSION@.tar
.PHONY: tar


# Make compressed tar archives
fish-@PACKAGE_VERSION@.tar.gz: fish-@PACKAGE_VERSION@.tar
	gzip -f --best -c fish-@PACKAGE_VERSION@.tar >fish-@PACKAGE_VERSION@.tar.gz

fish-@PACKAGE_VERSION@.tar.bz2: fish-@PACKAGE_VERSION@.tar
	bzip2 -f --best -k fish-@PACKAGE_VERSION@.tar

dist: fish-@PACKAGE_VERSION@.tar.bz2
.PHONY: dist


# distclean should restore the tree to the state right after extracting a tarball.
distclean: clean
	rm -f etc/config.fish seq share/config.fish
	rm -f config.status config.log config.h Makefile
.PHONY: distclean


# clean removes everything built by the makefile, but not things that are created by the configure script.
clean:
	rm -f *.o doc.h
	rm -f tests/tmp.err tests/tmp.out tests/tmp.status tests/foo.txt
	rm -f $(PROGRAMS) fish_tests tokenizer_test key_reader 
	rm -f share/config.fish etc/config.fish
	rm -f fish-@PACKAGE_VERSION@.tar
	rm -f fish-@PACKAGE_VERSION@.tar.gz
	rm -f fish-@PACKAGE_VERSION@.tar.bz2
	rm -rf fish-@PACKAGE_VERSION@
	rm -f $(TRANSLATIONS)
.PHONY: clean


# DO NOT DELETE THIS LINE -- make depend depends on it.

builtin.o: config.h fallback.h util.h wutil.h builtin.h io.h function.h complete.h proc.h parser.h event.h reader.h env.h common.h wgetopt.h sanity.h tokenizer.h wildcard.h input_common.h input.h intern.h signal.h exec.h highlight.h halloc.h halloc_util.h parse_util.h parser_keywords.h expand.h path.h builtin_set.c builtin_commandline.c builtin_complete.c builtin_ulimit.c builtin_jobs.c
builtin_commandline.o: config.h signal.h fallback.h util.h wutil.h builtin.h io.h common.h wgetopt.h reader.h proc.h parser.h event.h tokenizer.h input_common.h input.h parse_util.h
builtin_complete.o: config.h signal.h fallback.h util.h wutil.h builtin.h io.h common.h complete.h wgetopt.h parser.h proc.h event.h reader.h
builtin_jobs.o: config.h fallback.h util.h wutil.h builtin.h io.h proc.h parser.h event.h common.h wgetopt.h
builtin_set.o: config.h signal.h fallback.h util.h wutil.h builtin.h io.h env.h expand.h common.h wgetopt.h proc.h parser.h event.h
builtin_ulimit.o: config.h fallback.h util.h builtin.h io.h common.h wgetopt.h
common.o: config.h fallback.h util.h wutil.h common.h expand.h proc.h io.h wildcard.h parser.h event.h util.c halloc.c halloc.h halloc_util.c fallback.c
complete.o: config.h signal.h fallback.h util.h tokenizer.h wildcard.h proc.h io.h parser.h event.h function.h complete.h builtin.h env.h exec.h expand.h common.h reader.h history.h intern.h parse_util.h parser_keywords.h halloc.h halloc_util.h wutil.h path.h
env.o: config.h signal.h fallback.h util.h wutil.h proc.h io.h common.h env.h sanity.h expand.h history.h reader.h parser.h event.h env_universal.h env_universal_common.h input_common.h path.h halloc.h halloc_util.h complete.h
env_universal.o: config.h signal.h fallback.h util.h common.h wutil.h env_universal_common.h env_universal.h
env_universal_common.o: config.h signal.h fallback.h util.h common.h wutil.h env_universal_common.h
event.o: config.h signal.h fallback.h util.h wutil.h function.h proc.h io.h parser.h event.h common.h halloc_util.h
exec.o: config.h signal.h fallback.h util.h common.h wutil.h proc.h io.h exec.h parser.h event.h builtin.h function.h env.h wildcard.h sanity.h expand.h halloc.h halloc_util.h parse_util.h
expand.o: config.h signal.h fallback.h util.h common.h wutil.h env.h proc.h io.h parser.h event.h expand.h wildcard.h exec.h tokenizer.h complete.h parse_util.h halloc.h halloc_util.h
fallback.o: config.h fallback.h util.h
fish.o: config.h signal.h fallback.h util.h common.h reader.h io.h builtin.h function.h complete.h wutil.h env.h sanity.h proc.h parser.h event.h expand.h intern.h exec.h output.h halloc.h halloc_util.h history.h path.h
fish_indent.o: config.h fallback.h util.h common.h wutil.h halloc.h halloc_util.h tokenizer.h print_help.h parser_keywords.h
fish_pager.o: config.h signal.h fallback.h util.h wutil.h common.h complete.h output.h input_common.h env_universal.h env_universal_common.h halloc.h halloc_util.h print_help.h
fish_tests.o: config.h signal.h fallback.h util.h common.h proc.h io.h reader.h builtin.h function.h complete.h wutil.h env.h expand.h parser.h event.h tokenizer.h output.h exec.h path.h halloc.h halloc_util.h
fishd.o: config.h signal.h fallback.h util.h common.h wutil.h env_universal_common.h halloc.h halloc_util.h path.h print_help.h
function.o: config.h signal.h wutil.h fallback.h util.h function.h proc.h io.h parser.h event.h common.h intern.h reader.h parse_util.h parser_keywords.h env.h expand.h halloc.h halloc_util.h
halloc.o: config.h fallback.h util.h common.h halloc.h
halloc_util.o: config.h fallback.h util.h common.h halloc.h
highlight.o: config.h signal.h fallback.h util.h wutil.h highlight.h tokenizer.h proc.h io.h parser.h event.h parse_util.h parser_keywords.h builtin.h function.h env.h expand.h sanity.h common.h complete.h output.h halloc.h halloc_util.h wildcard.h path.h
history.o: config.h fallback.h util.h wutil.h history.h common.h halloc.h halloc_util.h intern.h path.h signal.h
input.o: config.h signal.h fallback.h util.h wutil.h reader.h io.h proc.h common.h sanity.h input_common.h input.h parser.h event.h env.h expand.h output.h intern.h halloc.h halloc_util.h
input_common.o: config.h fallback.h util.h common.h wutil.h input_common.h env_universal.h env_universal_common.h
intern.o: config.h fallback.h util.h wutil.h common.h intern.h
io.o: config.h fallback.h util.h wutil.h exec.h proc.h io.h common.h halloc.h
key_reader.o: config.h fallback.h input_common.h
kill.o: config.h signal.h fallback.h util.h wutil.h kill.h proc.h io.h sanity.h common.h env.h exec.h halloc.h path.h
mimedb.o: config.h xdgmime.h fallback.h util.h print_help.h
output.o: config.h signal.h fallback.h util.h wutil.h expand.h common.h output.h halloc_util.h highlight.h
parse_util.o: config.h fallback.h util.h wutil.h common.h tokenizer.h parse_util.h expand.h intern.h exec.h proc.h io.h env.h signal.h wildcard.h halloc_util.h
parser.o: config.h signal.h fallback.h util.h common.h wutil.h proc.h io.h parser.h event.h parser_keywords.h tokenizer.h exec.h wildcard.h function.h builtin.h env.h expand.h reader.h sanity.h env_universal.h env_universal_common.h intern.h parse_util.h halloc.h halloc_util.h path.h
parser_keywords.o: config.h fallback.h common.h util.h parser_keywords.h
path.o: config.h fallback.h util.h common.h env.h wutil.h halloc.h halloc_util.h path.h expand.h
print_help.o: print_help.h
proc.o: config.h signal.h fallback.h util.h wutil.h proc.h io.h common.h reader.h sanity.h env.h parser.h event.h halloc.h halloc_util.h output.h
reader.o: config.h signal.h fallback.h util.h wutil.h highlight.h reader.h io.h proc.h parser.h event.h complete.h history.h common.h sanity.h env.h exec.h expand.h tokenizer.h kill.h input_common.h input.h function.h output.h screen.h halloc.h halloc_util.h parse_util.h
sanity.o: config.h signal.h fallback.h util.h common.h sanity.h proc.h io.h history.h reader.h kill.h wutil.h
screen.o: config.h fallback.h common.h util.h wutil.h output.h highlight.h screen.h env.h
set_color.o: config.h fallback.h print_help.h
signal.o: config.h signal.h common.h util.h fallback.h wutil.h event.h reader.h io.h proc.h
tokenizer.o: config.h fallback.h util.h wutil.h tokenizer.h common.h
util.o: config.h fallback.h util.h common.h wutil.h
wgetopt.o: config.h wgetopt.h wutil.h fallback.h
wildcard.o: config.h fallback.h util.h wutil.h complete.h common.h wildcard.h reader.h io.h expand.h exec.h proc.h halloc_util.h
wutil.o: config.h fallback.h util.h common.h wutil.h halloc.h halloc_util.h
xdgmime.o: xdgmime.h xdgmimeint.h xdgmimeglob.h xdgmimemagic.h xdgmimealias.h xdgmimeparent.h
xdgmimealias.o: xdgmimealias.h xdgmime.h xdgmimeint.h
xdgmimeglob.o: xdgmimeglob.h xdgmime.h xdgmimeint.h
xdgmimeint.o: xdgmimeint.h xdgmime.h
xdgmimemagic.o: xdgmimemagic.h xdgmime.h xdgmimeint.h
xdgmimeparent.o: xdgmimeparent.h xdgmime.h xdgmimeint.h
